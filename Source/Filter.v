// -------------------------------------------------------------
// 
// File Name: max_opt\hdlsrc\FSRC\Filter.v
// Created: 2021-11-30 14:35:22
// 
// Generated by MATLAB 9.11 and HDL Coder 3.19
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Filter
// Source Path: FSRC/Subsystem/Filter
// Hierarchy Level: 1
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ps

module Filter
          (clk,
           enable,
           reset_x,
           reset,
           In1,
           Out1);
  input   reset_x;
  input   reset;
  input   clk;
  input   enable;
  input   signed [12:0] In1;  // sfix13_En9
  output  signed [17:0] Out1;  // sfix18_En19


  reg [31:0] kconst;  // ufix32_En34
  reg [31:0] kconst_1;  // ufix32_En36
  reg [31:0] kconst_2;  // ufix32_En34
  reg [31:0] kconst_3;  // ufix32_En34
  reg signed [12:0] In1_1;  // sfix13_En9
  wire signed [32:0] s_1_cast;  // sfix33_En34
  wire signed [45:0] s_1_mul_temp;  // sfix46_En43
  wire signed [44:0] s_1_out1;  // sfix45_En43
  reg signed [44:0] s_1_out1_1;  // sfix45_En43
  wire signed [15:0] s_1_out1_2;  // sfix16_En16
  reg signed [15:0] delayMatch_reg [0:1];  // sfix16 [2]
  wire signed [15:0] delayMatch_reg_next [0:1];  // sfix16_En16 [2]
  wire signed [15:0] s_1_out1_3;  // sfix16_En16
  wire stateControl;
  reg  [0:3] delayMatch2_reg;  // ufix1 [4]
  wire [0:3] delayMatch2_reg_next;  // ufix1 [4]
  wire stateControl_1;
  reg signed [31:0] kconst_4;  // sfix32_En30
  reg signed [15:0] s_1_out1_4;  // sfix16_En16
  wire signed [47:0] b_2_1_out1;  // sfix48_En46
  reg signed [47:0] b_2_1_out1_1;  // sfix48_En46
  wire signed [15:0] b_2_1_out1_2;  // sfix16_En15
  wire stateControl_3;
  reg  [0:3] delayMatch1_reg;  // ufix1 [4]
  wire [0:3] delayMatch1_reg_next;  // ufix1 [4]
  wire stateControl_4;
  wire signed [19:0] HeadSum1_out1;  // sfix20_En20
  wire signed [51:0] a_2_1_mul_temp;  // sfix52_En50
  wire signed [18:0] a_2_1_out1;  // sfix19_En17
  wire signed [52:0] a_3_1_mul_temp;  // sfix53_En52
  wire signed [51:0] a_3_1_cast;  // sfix52_En52
  wire signed [18:0] a_3_1_out1;  // sfix19_En19
  wire signed [19:0] FootSum1_sub_cast;  // sfix20_En19
  wire signed [19:0] FootSum1_sub_cast_1;  // sfix20_En19
  wire signed [19:0] FootSum1_sub_temp;  // sfix20_En19
  wire signed [17:0] FootSum1_out1;  // sfix18_En19
  reg signed [17:0] FootDelay1_out1;  // sfix18_En19
  wire signed [17:0] FootSum1_out1_1;  // sfix18_En19
  wire signed [20:0] BodyLSum21_add_cast;  // sfix21_En19
  wire signed [20:0] BodyLSum21_add_cast_1;  // sfix21_En19
  wire signed [20:0] BodyLSum21_add_temp;  // sfix21_En19
  wire signed [18:0] BodyLSum21_out1;  // sfix19_En17
  wire signed [19:0] BodyRSum21_sub_cast;  // sfix20_En17
  wire signed [19:0] BodyRSum21_sub_cast_1;  // sfix20_En17
  wire signed [19:0] BodyRSum21_sub_temp;  // sfix20_En17
  wire signed [17:0] BodyRSum21_out1;  // sfix18_En19
  reg signed [17:0] BodyDelay21_out1;  // sfix18_En19
  wire signed [17:0] BodyRSum21_out1_1;  // sfix18_En19
  wire signed [19:0] HeadSum1_add_cast;  // sfix20_En19
  wire signed [19:0] HeadSum1_add_cast_1;  // sfix20_En19
  wire signed [19:0] HeadSum1_add_temp;  // sfix20_En19
  reg signed [19:0] SectIn2_out1;  // sfix20_En20
  wire signed [32:0] s_2_cast;  // sfix33_En34
  wire signed [52:0] s_2_mul_temp;  // sfix53_En54
  wire signed [51:0] s_2_out1;  // sfix52_En54
  reg signed [51:0] s_2_out1_1;  // sfix52_En54
  wire signed [19:0] s_2_out1_2;  // sfix20_En23
  reg signed [19:0] delayMatch3_reg [0:1];  // sfix20 [2]
  wire signed [19:0] delayMatch3_reg_next [0:1];  // sfix20_En23 [2]
  wire signed [19:0] s_2_out1_3;  // sfix20_En23
  wire stateControl_5;
  reg  [0:7] delayMatch5_reg;  // ufix1 [8]
  wire [0:7] delayMatch5_reg_next;  // ufix1 [8]
  wire stateControl_6;
  reg signed [31:0] kconst_5;  // sfix32_En30
  reg signed [19:0] s_2_out1_4;  // sfix20_En23
  wire signed [51:0] b_2_2_out1;  // sfix52_En53
  reg signed [51:0] b_2_2_out1_1;  // sfix52_En53
  wire signed [17:0] b_2_2_out1_2;  // sfix18_En19
  wire stateControl_7;
  reg  [0:7] delayMatch4_reg;  // ufix1 [8]
  wire [0:7] delayMatch4_reg_next;  // ufix1 [8]
  wire stateControl_8;
  wire signed [17:0] HeadSum2_out1;  // sfix18_En19
  wire signed [49:0] a_2_2_mul_temp;  // sfix50_En49
  wire signed [17:0] a_2_2_out1;  // sfix18_En19
  wire signed [50:0] a_3_2_mul_temp;  // sfix51_En51
  wire signed [49:0] a_3_2_cast;  // sfix50_En51
  wire signed [17:0] a_3_2_out1;  // sfix18_En19
  wire signed [22:0] FootSum2_sub_cast;  // sfix23_En23
  wire signed [22:0] FootSum2_sub_cast_1;  // sfix23_En23
  wire signed [22:0] FootSum2_sub_temp;  // sfix23_En23
  wire signed [17:0] FootSum2_out1;  // sfix18_En19
  reg signed [17:0] FootDelay2_out1;  // sfix18_En19
  wire signed [17:0] FootSum2_out1_1;  // sfix18_En19
  wire signed [18:0] BodyLSum22_add_cast;  // sfix19_En19
  wire signed [18:0] BodyLSum22_add_cast_1;  // sfix19_En19
  wire signed [18:0] BodyLSum22_add_temp;  // sfix19_En19
  wire signed [17:0] BodyLSum22_out1;  // sfix18_En19
  wire signed [18:0] BodyRSum22_sub_cast;  // sfix19_En19
  wire signed [18:0] BodyRSum22_sub_cast_1;  // sfix19_En19
  wire signed [18:0] BodyRSum22_sub_temp;  // sfix19_En19
  wire signed [17:0] BodyRSum22_out1;  // sfix18_En19
  reg signed [17:0] BodyDelay22_out1;  // sfix18_En19
  wire signed [17:0] BodyRSum22_out1_1;  // sfix18_En19
  wire signed [22:0] HeadSum2_add_cast;  // sfix23_En23
  wire signed [22:0] HeadSum2_add_cast_1;  // sfix23_En23
  wire signed [22:0] HeadSum2_add_temp;  // sfix23_En23
  reg signed [17:0] SectIn3_out1;  // sfix18_En19
  wire signed [32:0] s_3_cast;  // sfix33_En36
  wire signed [50:0] s_3_mul_temp;  // sfix51_En55
  wire signed [49:0] s_3_out1;  // sfix50_En55
  reg signed [49:0] s_3_out1_1;  // sfix50_En55
  wire signed [19:0] s_3_out1_2;  // sfix20_En26
  reg signed [19:0] delayMatch6_reg [0:1];  // sfix20 [2]
  wire signed [19:0] delayMatch6_reg_next [0:1];  // sfix20_En26 [2]
  wire signed [19:0] s_3_out1_3;  // sfix20_En26
  wire stateControl_9;
  reg  [0:11] delayMatch8_reg;  // ufix1 [12]
  wire [0:11] delayMatch8_reg_next;  // ufix1 [12]
  wire stateControl_10;
  reg signed [31:0] kconst_6;  // sfix32_En30
  reg signed [19:0] s_3_out1_4;  // sfix20_En26
  wire signed [51:0] b_2_3_out1;  // sfix52_En56
  reg signed [51:0] b_2_3_out1_1;  // sfix52_En56
  wire signed [19:0] b_2_3_out1_2;  // sfix20_En26
  wire stateControl_11;
  reg  [0:11] delayMatch7_reg;  // ufix1 [12]
  wire [0:11] delayMatch7_reg_next;  // ufix1 [12]
  wire stateControl_12;
  wire signed [17:0] HeadSum3_out1;  // sfix18_En19
  wire signed [49:0] a_2_3_mul_temp;  // sfix50_En49
  wire signed [17:0] a_2_3_out1;  // sfix18_En19
  wire signed [50:0] a_3_3_mul_temp;  // sfix51_En51
  wire signed [49:0] a_3_3_cast;  // sfix50_En51
  wire signed [17:0] a_3_3_out1;  // sfix18_En21
  wire signed [23:0] FootSum3_sub_cast;  // sfix24_En26
  wire signed [23:0] FootSum3_sub_cast_1;  // sfix24_En26
  wire signed [23:0] FootSum3_sub_temp;  // sfix24_En26
  wire signed [17:0] FootSum3_out1;  // sfix18_En19
  reg signed [17:0] FootDelay3_out1;  // sfix18_En19
  wire signed [17:0] FootSum3_out1_1;  // sfix18_En19
  wire signed [25:0] BodyLSum23_add_cast;  // sfix26_En26
  wire signed [25:0] BodyLSum23_add_cast_1;  // sfix26_En26
  wire signed [25:0] BodyLSum23_add_temp;  // sfix26_En26
  wire signed [17:0] BodyLSum23_out1;  // sfix18_En19
  wire signed [18:0] BodyRSum23_sub_cast;  // sfix19_En19
  wire signed [18:0] BodyRSum23_sub_cast_1;  // sfix19_En19
  wire signed [18:0] BodyRSum23_sub_temp;  // sfix19_En19
  wire signed [17:0] BodyRSum23_out1;  // sfix18_En19
  reg signed [17:0] BodyDelay23_out1;  // sfix18_En19
  wire signed [17:0] BodyRSum23_out1_1;  // sfix18_En19
  wire signed [25:0] HeadSum3_add_cast;  // sfix26_En26
  wire signed [25:0] HeadSum3_add_cast_1;  // sfix26_En26
  wire signed [25:0] HeadSum3_add_temp;  // sfix26_En26
  reg signed [17:0] SectIn4_out1;  // sfix18_En19
  wire signed [32:0] s_4_cast;  // sfix33_En34
  wire signed [50:0] s_4_mul_temp;  // sfix51_En53
  wire signed [49:0] s_4_out1;  // sfix50_En53
  reg signed [49:0] s_4_out1_1;  // sfix50_En53
  wire signed [19:0] s_4_out1_2;  // sfix20_En24
  wire stateControl_13;
  reg  [0:13] delayMatch9_reg;  // ufix1 [14]
  wire [0:13] delayMatch9_reg_next;  // ufix1 [14]
  wire stateControl_14;
  wire signed [17:0] HeadSum4_out1;  // sfix18_En19
  wire signed [49:0] a_2_4_mul_temp;  // sfix50_En50
  wire signed [17:0] a_2_4_out1;  // sfix18_En19
  wire signed [23:0] BodyRSum24_sub_cast;  // sfix24_En24
  wire signed [23:0] BodyRSum24_sub_cast_1;  // sfix24_En24
  wire signed [23:0] BodyRSum24_sub_temp;  // sfix24_En24
  wire signed [17:0] BodyRSum24_out1;  // sfix18_En19
  reg signed [17:0] BodyDelay24_out1;  // sfix18_En19
  wire signed [17:0] BodyRSum24_out1_1;  // sfix18_En19
  wire signed [23:0] HeadSum4_add_cast;  // sfix24_En24
  wire signed [23:0] HeadSum4_add_cast_1;  // sfix24_En24
  wire signed [23:0] HeadSum4_add_temp;  // sfix24_En24

  always@(posedge clk)begin
    if (reset==1)begin
        kconst <= 32'b00000000000000000000000000000000;
        kconst_1 <= 32'b00000000000000000000000000000000;
        kconst_2 <= 32'b00000000000000000000000000000000;
        kconst_3 <= 32'b00000000000000000000000000000000;
        In1_1 <= 13'sb0000000000000;
        s_1_out1_1 <= 45'sh000000000000;
        delayMatch_reg[0] <= 16'sb0000000000000000;
        delayMatch_reg[1] <= 16'sb0000000000000000;
        delayMatch2_reg[0] <= 1'b0;
        delayMatch2_reg[1] <= 1'b0;
        delayMatch2_reg[2] <= 1'b0;
        delayMatch2_reg[3] <= 1'b0;
        kconst_4 <= 32'sb00000000000000000000000000000000;
        s_1_out1_4 <= 16'sb0000000000000000;
        b_2_1_out1_1 <= 48'sh000000000000;
        delayMatch1_reg[0] <= 1'b0;
        delayMatch1_reg[1] <= 1'b0;
        delayMatch1_reg[2] <= 1'b0;
        delayMatch1_reg[3] <= 1'b0;
        FootDelay1_out1 <= 18'sb000000000000000000;
        BodyDelay21_out1 <= 18'sb000000000000000000;
        SectIn2_out1 <= 20'sb00000000000000000000;
        s_2_out1_1 <= 52'sh0000000000000;
        delayMatch3_reg[0] <= 20'sb00000000000000000000;
        delayMatch3_reg[1] <= 20'sb00000000000000000000;
        delayMatch5_reg[0] <= 1'b0;
        delayMatch5_reg[1] <= 1'b0;
        delayMatch5_reg[2] <= 1'b0;
        delayMatch5_reg[3] <= 1'b0;
        delayMatch5_reg[4] <= 1'b0;
        delayMatch5_reg[5] <= 1'b0;
        delayMatch5_reg[6] <= 1'b0;
        delayMatch5_reg[7] <= 1'b0;
        kconst_5 <= 32'sb00000000000000000000000000000000;
        s_2_out1_4 <= 20'sb00000000000000000000;
        b_2_2_out1_1 <= 52'sh0000000000000;
        delayMatch4_reg[0] <= 1'b0;
        delayMatch4_reg[1] <= 1'b0;
        delayMatch4_reg[2] <= 1'b0;
        delayMatch4_reg[3] <= 1'b0;
        delayMatch4_reg[4] <= 1'b0;
        delayMatch4_reg[5] <= 1'b0;
        delayMatch4_reg[6] <= 1'b0;
        delayMatch4_reg[7] <= 1'b0;
        FootDelay2_out1 <= 18'sb000000000000000000;
        BodyDelay22_out1 <= 18'sb000000000000000000;
        SectIn3_out1 <= 18'sb000000000000000000;
        s_3_out1_1 <= 50'sh0000000000000;
        delayMatch6_reg[0] <= 20'sb00000000000000000000;
        delayMatch6_reg[1] <= 20'sb00000000000000000000;
        delayMatch8_reg[0] <= 1'b0;
        delayMatch8_reg[1] <= 1'b0;
        delayMatch8_reg[2] <= 1'b0;
        delayMatch8_reg[3] <= 1'b0;
        delayMatch8_reg[4] <= 1'b0;
        delayMatch8_reg[5] <= 1'b0;
        delayMatch8_reg[6] <= 1'b0;
        delayMatch8_reg[7] <= 1'b0;
        delayMatch8_reg[8] <= 1'b0;
        delayMatch8_reg[9] <= 1'b0;
        delayMatch8_reg[10] <= 1'b0;
        delayMatch8_reg[11] <= 1'b0;
        kconst_6 <= 32'sb00000000000000000000000000000000;
        s_3_out1_4 <= 20'sb00000000000000000000;
        b_2_3_out1_1 <= 52'sh0000000000000;
        delayMatch7_reg[0] <= 1'b0;
        delayMatch7_reg[1] <= 1'b0;
        delayMatch7_reg[2] <= 1'b0;
        delayMatch7_reg[3] <= 1'b0;
        delayMatch7_reg[4] <= 1'b0;
        delayMatch7_reg[5] <= 1'b0;
        delayMatch7_reg[6] <= 1'b0;
        delayMatch7_reg[7] <= 1'b0;
        delayMatch7_reg[8] <= 1'b0;
        delayMatch7_reg[9] <= 1'b0;
        delayMatch7_reg[10] <= 1'b0;
        delayMatch7_reg[11] <= 1'b0;
        FootDelay3_out1 <= 18'sb000000000000000000;
        BodyDelay23_out1 <= 18'sb000000000000000000;
        SectIn4_out1 <= 18'sb000000000000000000;
        s_4_out1_1 <= 50'sh0000000000000;
        delayMatch9_reg[0] <= 1'b0;
        delayMatch9_reg[1] <= 1'b0;
        delayMatch9_reg[2] <= 1'b0;
        delayMatch9_reg[3] <= 1'b0;
        delayMatch9_reg[4] <= 1'b0;
        delayMatch9_reg[5] <= 1'b0;
        delayMatch9_reg[6] <= 1'b0;
        delayMatch9_reg[7] <= 1'b0;
        delayMatch9_reg[8] <= 1'b0;
        delayMatch9_reg[9] <= 1'b0;
        delayMatch9_reg[10] <= 1'b0;
        delayMatch9_reg[11] <= 1'b0;
        delayMatch9_reg[12] <= 1'b0;
        delayMatch9_reg[13] <= 1'b0;
        BodyDelay24_out1 <= 18'sb000000000000000000;
    end
    else begin
	  if (enable) begin
	      kconst <= 32'b10010111111001010010100000001101; //HwModeRegister12_process
	      kconst_1 <= 32'b10011100101111101110011011000101;//HwModeRegister10_process
	      kconst_2 <= 32'b11001100010000111010110000011101;//HwModeRegister8_process
	      kconst_3 <= 32'b10101000100100011100000001000011;//HwModeRegister6_process
	      In1_1 <= In1;//HwModeRegister7_process
	      s_1_out1_1 <= s_1_out1;//PipelineRegister3_process
	      delayMatch_reg[0] <= delayMatch_reg_next[0];//delayMatch_process
        delayMatch_reg[1] <= delayMatch_reg_next[1];//
	      delayMatch2_reg[0] <= delayMatch2_reg_next[0];//delayMatch2_process
        delayMatch2_reg[1] <= delayMatch2_reg_next[1];//
        delayMatch2_reg[2] <= delayMatch2_reg_next[2];//
        delayMatch2_reg[3] <= delayMatch2_reg_next[3];//
        kconst_4 <= 32'sb10010001000111100100010001111100;//HwModeRegister_process
        s_1_out1_4 <= s_1_out1_2;//HwModeRegister1_process
        b_2_1_out1_1 <= b_2_1_out1;//PipelineRegister_process
        delayMatch1_reg[0] <= delayMatch1_reg_next[0];//delayMatch1_process
        delayMatch1_reg[1] <= delayMatch1_reg_next[1];//
        delayMatch1_reg[2] <= delayMatch1_reg_next[2];//
        delayMatch1_reg[3] <= delayMatch1_reg_next[3];//
        FootDelay1_out1 <= FootSum1_out1_1;//FootDelay1_process
        BodyDelay21_out1 <= BodyRSum21_out1_1;//BodyDelay21_process
        SectIn2_out1 <= HeadSum1_out1;//HwModeRegister9_process
        s_2_out1_1 <= s_2_out1;//PipelineRegister4_process
        delayMatch3_reg[0] <= delayMatch3_reg_next[0];//delayMatch3_process
        delayMatch3_reg[1] <= delayMatch3_reg_next[1];//
	      delayMatch5_reg[0] <= delayMatch5_reg_next[0];//delayMatch5_process
        delayMatch5_reg[1] <= delayMatch5_reg_next[1];//
        delayMatch5_reg[2] <= delayMatch5_reg_next[2];//
        delayMatch5_reg[3] <= delayMatch5_reg_next[3];//
        delayMatch5_reg[4] <= delayMatch5_reg_next[4];//
        delayMatch5_reg[5] <= delayMatch5_reg_next[5];//
        delayMatch5_reg[6] <= delayMatch5_reg_next[6];//
        delayMatch5_reg[7] <= delayMatch5_reg_next[7];//
        kconst_5 <= 32'sb10011000000010110100001110001000;//HwModeRegister2_process
        s_2_out1_4 <= s_2_out1_2;//HwModeRegister3_process
        b_2_2_out1_1 <= b_2_2_out1;//PipelineRegister1_process
	      delayMatch4_reg[0] <= delayMatch4_reg_next[0];//delayMatch4_process
        delayMatch4_reg[1] <= delayMatch4_reg_next[1];//
        delayMatch4_reg[2] <= delayMatch4_reg_next[2];//
        delayMatch4_reg[3] <= delayMatch4_reg_next[3];//
        delayMatch4_reg[4] <= delayMatch4_reg_next[4];//
        delayMatch4_reg[5] <= delayMatch4_reg_next[5];//
        delayMatch4_reg[6] <= delayMatch4_reg_next[6];//
        delayMatch4_reg[7] <= delayMatch4_reg_next[7];//
        FootDelay2_out1 <= FootSum2_out1_1;//FootDelay2_process
	      BodyDelay22_out1 <= BodyRSum22_out1_1;//BodyDelay22_process
	      SectIn3_out1 <= HeadSum2_out1;//HwModeRegister11_process
	      s_3_out1_1 <= s_3_out1;//PipelineRegister5_process
	      delayMatch6_reg[0] <= delayMatch6_reg_next[0];//delayMatch6_process
        delayMatch6_reg[1] <= delayMatch6_reg_next[1];//
	      delayMatch8_reg[0] <= delayMatch8_reg_next[0];//delayMatch8_process
        delayMatch8_reg[1] <= delayMatch8_reg_next[1];//
        delayMatch8_reg[2] <= delayMatch8_reg_next[2];//
        delayMatch8_reg[3] <= delayMatch8_reg_next[3];//
        delayMatch8_reg[4] <= delayMatch8_reg_next[4];//
        delayMatch8_reg[5] <= delayMatch8_reg_next[5];//
        delayMatch8_reg[6] <= delayMatch8_reg_next[6];//
        delayMatch8_reg[7] <= delayMatch8_reg_next[7];//
        delayMatch8_reg[8] <= delayMatch8_reg_next[8];//
        delayMatch8_reg[9] <= delayMatch8_reg_next[9];//
        delayMatch8_reg[10] <= delayMatch8_reg_next[10];//
        delayMatch8_reg[11] <= delayMatch8_reg_next[11];//
	      kconst_6 <= 32'sb10111100000001111001000010111000;//HwModeRegister4_process
	      s_3_out1_4 <= s_3_out1_2;//HwModeRegister5_process 
	      b_2_3_out1_1 <= b_2_3_out1;//PipelineRegister2_process
	      delayMatch7_reg[0] <= delayMatch7_reg_next[0];//delayMatch7_process
        delayMatch7_reg[1] <= delayMatch7_reg_next[1];//
        delayMatch7_reg[2] <= delayMatch7_reg_next[2];//
        delayMatch7_reg[3] <= delayMatch7_reg_next[3];//
        delayMatch7_reg[4] <= delayMatch7_reg_next[4];//
        delayMatch7_reg[5] <= delayMatch7_reg_next[5];//
        delayMatch7_reg[6] <= delayMatch7_reg_next[6];//
        delayMatch7_reg[7] <= delayMatch7_reg_next[7];//
        delayMatch7_reg[8] <= delayMatch7_reg_next[8];//
        delayMatch7_reg[9] <= delayMatch7_reg_next[9];//
        delayMatch7_reg[10] <= delayMatch7_reg_next[10];//
        delayMatch7_reg[11] <= delayMatch7_reg_next[11];//
	      FootDelay3_out1 <= FootSum3_out1_1;//FootDelay3_process
	      BodyDelay23_out1 <= BodyRSum23_out1_1;//BodyDelay23_process
	      SectIn4_out1 <= HeadSum3_out1;//HwModeRegister13_process
	      s_4_out1_1 <= s_4_out1;//PipelineRegister6_process
	      delayMatch9_reg[0] <= delayMatch9_reg_next[0];//delayMatch9_process
        delayMatch9_reg[1] <= delayMatch9_reg_next[1];//
        delayMatch9_reg[2] <= delayMatch9_reg_next[2];//
        delayMatch9_reg[3] <= delayMatch9_reg_next[3];//
        delayMatch9_reg[4] <= delayMatch9_reg_next[4];//
        delayMatch9_reg[5] <= delayMatch9_reg_next[5];//
        delayMatch9_reg[6] <= delayMatch9_reg_next[6];//
        delayMatch9_reg[7] <= delayMatch9_reg_next[7];//
        delayMatch9_reg[8] <= delayMatch9_reg_next[8];//
        delayMatch9_reg[9] <= delayMatch9_reg_next[9];//
        delayMatch9_reg[10] <= delayMatch9_reg_next[10];//
        delayMatch9_reg[11] <= delayMatch9_reg_next[11];//
        delayMatch9_reg[12] <= delayMatch9_reg_next[12];//
        delayMatch9_reg[13] <= delayMatch9_reg_next[13];//
	      BodyDelay24_out1 <= BodyRSum24_out1_1;//BodyDelay24_process
 	end
    end
  end


  // <S3>/s(1)
  assign s_1_cast = {1'b0, kconst_3};
  assign s_1_mul_temp = s_1_cast * In1_1;
  assign s_1_out1 = s_1_mul_temp[44:0];

  assign s_1_out1_2 = (((s_1_out1_1[44] == 1'b0) && (s_1_out1_1[43:42] != 2'b00)) || ((s_1_out1_1[44] == 
    1'b0) && (s_1_out1_1[42:27] == 16'sb0111111111111111)) ? 16'sb0111111111111111 :
              ((s_1_out1_1[44] == 1'b1) && (s_1_out1_1[43:42] != 2'b11) ? 16'sb1000000000000000 :
              s_1_out1_1[42:27] + $signed({1'b0, s_1_out1_1[26]})));

  assign s_1_out1_3 = delayMatch_reg[1];
  assign delayMatch_reg_next[0] = s_1_out1_2;
  assign delayMatch_reg_next[1] = delayMatch_reg[0];

  assign stateControl = 1'b1;

  assign stateControl_1 = delayMatch2_reg[3];
  assign delayMatch2_reg_next[0] = stateControl;
  assign delayMatch2_reg_next[1] = delayMatch2_reg[0];
  assign delayMatch2_reg_next[2] = delayMatch2_reg[1];
  assign delayMatch2_reg_next[3] = delayMatch2_reg[2];


  // <S3>/b(2)(1)
  assign b_2_1_out1 = kconst_4 * s_1_out1_4;

  assign b_2_1_out1_2 = (((b_2_1_out1_1[47] == 1'b0) && (b_2_1_out1_1[46] != 1'b0)) || ((b_2_1_out1_1[47] == 
    1'b0) && (b_2_1_out1_1[46:31] == 16'sb0111111111111111)) ? 16'sb0111111111111111 :
              ((b_2_1_out1_1[47] == 1'b1) && (b_2_1_out1_1[46] != 1'b1) ? 16'sb1000000000000000 :
              b_2_1_out1_1[46:31] + $signed({1'b0, b_2_1_out1_1[30]})));

  assign stateControl_3 = 1'b1;
  assign stateControl_4 = delayMatch1_reg[3];
  assign delayMatch1_reg_next[0] = stateControl_3;
  assign delayMatch1_reg_next[1] = delayMatch1_reg[0];
  assign delayMatch1_reg_next[2] = delayMatch1_reg[1];
  assign delayMatch1_reg_next[3] = delayMatch1_reg[2];


  // <S3>/a(2)(1)
  assign a_2_1_mul_temp = 32'sb10001001000101100001010010110010 * HeadSum1_out1;
  assign a_2_1_out1 = ((a_2_1_mul_temp[51] == 1'b0) && (a_2_1_mul_temp[50:33] == 18'b111111111111111111) ? 
    19'sb0111111111111111111 :
              a_2_1_mul_temp[51:33] + $signed({1'b0, a_2_1_mul_temp[32]}));



  // <S3>/a(3)(1)
  assign a_3_1_mul_temp = 33'sh0F601D536 * HeadSum1_out1;
  assign a_3_1_cast = a_3_1_mul_temp[51:0];
  assign a_3_1_out1 = ((a_3_1_cast[51] == 1'b0) && (a_3_1_cast[50:33] == 18'b111111111111111111) ? 
    19'sb0111111111111111111 :
              a_3_1_cast[51:33] + $signed({1'b0, a_3_1_cast[32]}));


  // <S3>/FootSum1
  assign FootSum1_sub_cast = {s_1_out1_3[15], {s_1_out1_3, 3'b000}};
  assign FootSum1_sub_cast_1 = {a_3_1_out1[18], a_3_1_out1};
  assign FootSum1_sub_temp = FootSum1_sub_cast - FootSum1_sub_cast_1;
  assign FootSum1_out1 = ((FootSum1_sub_temp[19] == 1'b0) && (FootSum1_sub_temp[18:17] != 2'b00) ? 
    18'sb011111111111111111 :
              ((FootSum1_sub_temp[19] == 1'b1) && (FootSum1_sub_temp[18:17] != 2'b11) ? 
                18'sb100000000000000000 :
              $signed(FootSum1_sub_temp[17:0])));

  assign FootSum1_out1_1 = (stateControl_4 == 1'b0 ? FootDelay1_out1 :
              FootSum1_out1);


  // <S3>/BodyLSum21
  assign BodyLSum21_add_cast = {b_2_1_out1_2[15], {b_2_1_out1_2, 4'b0000}};
  assign BodyLSum21_add_cast_1 = {{3{FootDelay1_out1[17]}}, FootDelay1_out1};
  assign BodyLSum21_add_temp = BodyLSum21_add_cast + BodyLSum21_add_cast_1;
  assign BodyLSum21_out1 = ((BodyLSum21_add_temp[20] == 1'b0) && (BodyLSum21_add_temp[19:2] == 
    18'b111111111111111111) ? 19'sb0111111111111111111 :
              BodyLSum21_add_temp[20:2] + $signed({1'b0, BodyLSum21_add_temp[1]}));



  // <S3>/BodyRSum21
  assign BodyRSum21_sub_cast = {BodyLSum21_out1[18], BodyLSum21_out1};
  assign BodyRSum21_sub_cast_1 = {a_2_1_out1[18], a_2_1_out1};
  assign BodyRSum21_sub_temp = BodyRSum21_sub_cast - BodyRSum21_sub_cast_1;
  assign BodyRSum21_out1 = ((BodyRSum21_sub_temp[19] == 1'b0) && (BodyRSum21_sub_temp[18:15] != 4'b0000) ? 
    18'sb011111111111111111 :
              ((BodyRSum21_sub_temp[19] == 1'b1) && (BodyRSum21_sub_temp[18:15] != 4'b1111) ? 
                18'sb100000000000000000 :
              {BodyRSum21_sub_temp[15:0], 2'b00}));

  assign BodyRSum21_out1_1 = (stateControl_1 == 1'b0 ? BodyDelay21_out1 :
              BodyRSum21_out1);
/*
  // <S3>/BodyDelay21
  always @(posedge clk)
    begin : BodyDelay21_process
      if (enable) begin
        BodyDelay21_out1 <= BodyRSum21_out1_1;
      end
    end*/


  // <S3>/HeadSum1
  // 
  // <S3>/SectOut1
  // 
  // <S3>/SectIn2
  assign HeadSum1_add_cast = {s_1_out1_3[15], {s_1_out1_3, 3'b000}};
  assign HeadSum1_add_cast_1 = {{2{BodyDelay21_out1[17]}}, BodyDelay21_out1};
  assign HeadSum1_add_temp = HeadSum1_add_cast + HeadSum1_add_cast_1;
  assign HeadSum1_out1 = ((HeadSum1_add_temp[19] == 1'b0) && (HeadSum1_add_temp[18] != 1'b0) ? 
    20'sb01111111111111111111 :
              ((HeadSum1_add_temp[19] == 1'b1) && (HeadSum1_add_temp[18] != 1'b1) ? 20'sb10000000000000000000 
                :
              {HeadSum1_add_temp[18:0], 1'b0}));


  // <S3>/s(2)
  assign s_2_cast = {1'b0, kconst_2};
  assign s_2_mul_temp = s_2_cast * SectIn2_out1;
  assign s_2_out1 = s_2_mul_temp[51:0];

  assign s_2_out1_2 = (((s_2_out1_1[51] == 1'b0) && (s_2_out1_1[50] != 1'b0)) || ((s_2_out1_1[51] == 1'b0) && 
    (s_2_out1_1[50:31] == 20'sb01111111111111111111)) ? 20'sb01111111111111111111 :
              ((s_2_out1_1[51] == 1'b1) && (s_2_out1_1[50] != 1'b1) ? 20'sb10000000000000000000 :
              s_2_out1_1[50:31] + $signed({1'b0, s_2_out1_1[30]})));

  assign s_2_out1_3 = delayMatch3_reg[1];
  assign delayMatch3_reg_next[0] = s_2_out1_2;
  assign delayMatch3_reg_next[1] = delayMatch3_reg[0];

  assign stateControl_5 = 1'b1;

  assign stateControl_6 = delayMatch5_reg[7];
  assign delayMatch5_reg_next[0] = stateControl_5;
  assign delayMatch5_reg_next[1] = delayMatch5_reg[0];
  assign delayMatch5_reg_next[2] = delayMatch5_reg[1];
  assign delayMatch5_reg_next[3] = delayMatch5_reg[2];
  assign delayMatch5_reg_next[4] = delayMatch5_reg[3];
  assign delayMatch5_reg_next[5] = delayMatch5_reg[4];
  assign delayMatch5_reg_next[6] = delayMatch5_reg[5];
  assign delayMatch5_reg_next[7] = delayMatch5_reg[6];


  // <S3>/b(2)(2)
  assign b_2_2_out1 = kconst_5 * s_2_out1_4;

  assign b_2_2_out1_2 = ((b_2_2_out1_1[51] == 1'b0) && (b_2_2_out1_1[50:34] == 17'b11111111111111111) ? 
    18'sb011111111111111111 :
              b_2_2_out1_1[51:34] + $signed({1'b0, b_2_2_out1_1[33]}));

  assign stateControl_7 = 1'b1;

  assign stateControl_8 = delayMatch4_reg[7];
  assign delayMatch4_reg_next[0] = stateControl_7;
  assign delayMatch4_reg_next[1] = delayMatch4_reg[0];
  assign delayMatch4_reg_next[2] = delayMatch4_reg[1];
  assign delayMatch4_reg_next[3] = delayMatch4_reg[2];
  assign delayMatch4_reg_next[4] = delayMatch4_reg[3];
  assign delayMatch4_reg_next[5] = delayMatch4_reg[4];
  assign delayMatch4_reg_next[6] = delayMatch4_reg[5];
  assign delayMatch4_reg_next[7] = delayMatch4_reg[6];


  // <S3>/a(2)(2)
  assign a_2_2_mul_temp = 32'sb10001100100001000010101110101001 * HeadSum2_out1;
  assign a_2_2_out1 = (((a_2_2_mul_temp[49] == 1'b0) && (a_2_2_mul_temp[48:47] != 2'b00)) || 
    ((a_2_2_mul_temp[49] == 1'b0) && (a_2_2_mul_temp[47:30] == 18'sb011111111111111111)) ? 
    18'sb011111111111111111 :
              ((a_2_2_mul_temp[49] == 1'b1) && (a_2_2_mul_temp[48:47] != 2'b11) ? 18'sb100000000000000000 :
              a_2_2_mul_temp[47:30] + $signed({1'b0, a_2_2_mul_temp[29]})));


  // <S3>/a(3)(2)
  assign a_3_2_mul_temp = 33'sh0E11EA64A * HeadSum2_out1;
  assign a_3_2_cast = a_3_2_mul_temp[49:0];
  assign a_3_2_out1 = ((a_3_2_cast[49] == 1'b0) && (a_3_2_cast[48:32] == 17'b11111111111111111) ? 
    18'sb011111111111111111 :
              a_3_2_cast[49:32] + $signed({1'b0, a_3_2_cast[31]}));


  // <S3>/FootSum2
  assign FootSum2_sub_cast = {{3{s_2_out1_3[19]}}, s_2_out1_3};
  assign FootSum2_sub_cast_1 = {a_3_2_out1[17], {a_3_2_out1, 4'b0000}};
  assign FootSum2_sub_temp = FootSum2_sub_cast - FootSum2_sub_cast_1;
  assign FootSum2_out1 = (((FootSum2_sub_temp[22] == 1'b0) && (FootSum2_sub_temp[21] != 1'b0)) || 
    ((FootSum2_sub_temp[22] == 1'b0) && (FootSum2_sub_temp[21:4] == 18'sb011111111111111111)) ? 
    18'sb011111111111111111 :
              ((FootSum2_sub_temp[22] == 1'b1) && (FootSum2_sub_temp[21] != 1'b1) ? 18'sb100000000000000000 :
              FootSum2_sub_temp[21:4] + $signed({1'b0, FootSum2_sub_temp[3]})));

  assign FootSum2_out1_1 = (stateControl_8 == 1'b0 ? FootDelay2_out1 :
              FootSum2_out1);



  // <S3>/FootDelay2
  //all in always block


  // <S3>/BodyLSum22
  assign BodyLSum22_add_cast = {b_2_2_out1_2[17], b_2_2_out1_2};
  assign BodyLSum22_add_cast_1 = {FootDelay2_out1[17], FootDelay2_out1};
  assign BodyLSum22_add_temp = BodyLSum22_add_cast + BodyLSum22_add_cast_1;
  assign BodyLSum22_out1 = ((BodyLSum22_add_temp[18] == 1'b0) && (BodyLSum22_add_temp[17] != 1'b0) ? 
    18'sb011111111111111111 :
              ((BodyLSum22_add_temp[18] == 1'b1) && (BodyLSum22_add_temp[17] != 1'b1) ? 
                18'sb100000000000000000 :
              $signed(BodyLSum22_add_temp[17:0])));



  // <S3>/BodyRSum22
  assign BodyRSum22_sub_cast = {BodyLSum22_out1[17], BodyLSum22_out1};
  assign BodyRSum22_sub_cast_1 = {a_2_2_out1[17], a_2_2_out1};
  assign BodyRSum22_sub_temp = BodyRSum22_sub_cast - BodyRSum22_sub_cast_1;
  assign BodyRSum22_out1 = ((BodyRSum22_sub_temp[18] == 1'b0) && (BodyRSum22_sub_temp[17] != 1'b0) ? 
    18'sb011111111111111111 :
              ((BodyRSum22_sub_temp[18] == 1'b1) && (BodyRSum22_sub_temp[17] != 1'b1) ? 
                18'sb100000000000000000 :
              $signed(BodyRSum22_sub_temp[17:0])));



  assign BodyRSum22_out1_1 = (stateControl_6 == 1'b0 ? BodyDelay22_out1 :
              BodyRSum22_out1);



  // <S3>/BodyDelay22
  //all in always block

  // <S3>/HeadSum2
  // 
  // <S3>/SectOut2
  // 
  // <S3>/SectIn3
  assign HeadSum2_add_cast = {{3{s_2_out1_3[19]}}, s_2_out1_3};
  assign HeadSum2_add_cast_1 = {BodyDelay22_out1[17], {BodyDelay22_out1, 4'b0000}};
  assign HeadSum2_add_temp = HeadSum2_add_cast + HeadSum2_add_cast_1;
  assign HeadSum2_out1 = (((HeadSum2_add_temp[22] == 1'b0) && (HeadSum2_add_temp[21] != 1'b0)) || 
    ((HeadSum2_add_temp[22] == 1'b0) && (HeadSum2_add_temp[21:4] == 18'sb011111111111111111)) ? 
    18'sb011111111111111111 :
              ((HeadSum2_add_temp[22] == 1'b1) && (HeadSum2_add_temp[21] != 1'b1) ? 18'sb100000000000000000 :
              HeadSum2_add_temp[21:4] + $signed({1'b0, HeadSum2_add_temp[3]})));


/*
  always @(posedge clk)
    begin : HwModeRegister11_process
      if (enable) begin
        SectIn3_out1 <= HeadSum2_out1;
      end
    end*/



  // <S3>/s(3)
  assign s_3_cast = {1'b0, kconst_1};
  assign s_3_mul_temp = s_3_cast * SectIn3_out1;
  assign s_3_out1 = s_3_mul_temp[49:0];
/*
  always @(posedge clk)
    begin : PipelineRegister5_process
      if (enable) begin
        s_3_out1_1 <= s_3_out1;
      end
    end*/
  assign s_3_out1_2 = (((s_3_out1_1[49] == 1'b0) && (s_3_out1_1[48] != 1'b0)) || ((s_3_out1_1[49] == 1'b0) && 
    (s_3_out1_1[48:29] == 20'sb01111111111111111111)) ? 20'sb01111111111111111111 :
              ((s_3_out1_1[49] == 1'b1) && (s_3_out1_1[48] != 1'b1) ? 20'sb10000000000000000000 :
              s_3_out1_1[48:29] + $signed({1'b0, s_3_out1_1[28]})));
/*
  always @(posedge clk)
    begin : delayMatch6_process
      if (enable) begin
        delayMatch6_reg[0] <= delayMatch6_reg_next[0];
        delayMatch6_reg[1] <= delayMatch6_reg_next[1];
      end
    end*/

  assign s_3_out1_3 = delayMatch6_reg[1];
  assign delayMatch6_reg_next[0] = s_3_out1_2;
  assign delayMatch6_reg_next[1] = delayMatch6_reg[0];

  assign stateControl_9 = 1'b1;
/*
  always @(posedge clk)
    begin : delayMatch8_process
      if (enable) begin
        delayMatch8_reg[0] <= delayMatch8_reg_next[0];
        delayMatch8_reg[1] <= delayMatch8_reg_next[1];
        delayMatch8_reg[2] <= delayMatch8_reg_next[2];
        delayMatch8_reg[3] <= delayMatch8_reg_next[3];
        delayMatch8_reg[4] <= delayMatch8_reg_next[4];
        delayMatch8_reg[5] <= delayMatch8_reg_next[5];
        delayMatch8_reg[6] <= delayMatch8_reg_next[6];
        delayMatch8_reg[7] <= delayMatch8_reg_next[7];
        delayMatch8_reg[8] <= delayMatch8_reg_next[8];
        delayMatch8_reg[9] <= delayMatch8_reg_next[9];
        delayMatch8_reg[10] <= delayMatch8_reg_next[10];
        delayMatch8_reg[11] <= delayMatch8_reg_next[11];
      end
    end*/

  assign stateControl_10 = delayMatch8_reg[11];
  assign delayMatch8_reg_next[0] = stateControl_9;
  assign delayMatch8_reg_next[1] = delayMatch8_reg[0];
  assign delayMatch8_reg_next[2] = delayMatch8_reg[1];
  assign delayMatch8_reg_next[3] = delayMatch8_reg[2];
  assign delayMatch8_reg_next[4] = delayMatch8_reg[3];
  assign delayMatch8_reg_next[5] = delayMatch8_reg[4];
  assign delayMatch8_reg_next[6] = delayMatch8_reg[5];
  assign delayMatch8_reg_next[7] = delayMatch8_reg[6];
  assign delayMatch8_reg_next[8] = delayMatch8_reg[7];
  assign delayMatch8_reg_next[9] = delayMatch8_reg[8];
  assign delayMatch8_reg_next[10] = delayMatch8_reg[9];
  assign delayMatch8_reg_next[11] = delayMatch8_reg[10];
/*
  always @(posedge clk)
    begin : HwModeRegister4_process
      if (enable) begin
        kconst_6 <= 32'sb10111100000001111001000010111000;
      end
    end*/
/*
  always @(posedge clk)
    begin : HwModeRegister5_process
      if (enable) begin
        s_3_out1_4 <= s_3_out1_2;
      end
    end*/


  // <S3>/b(2)(3)
  assign b_2_3_out1 = kconst_6 * s_3_out1_4;
/*
  always @(posedge clk)
    begin : PipelineRegister2_process
      if (enable) begin
        b_2_3_out1_1 <= b_2_3_out1;
      end
    end*/

  assign b_2_3_out1_2 = (((b_2_3_out1_1[51] == 1'b0) && (b_2_3_out1_1[50:49] != 2'b00)) || ((b_2_3_out1_1[51] 
    == 1'b0) && (b_2_3_out1_1[49:30] == 20'sb01111111111111111111)) ? 20'sb01111111111111111111 :
              ((b_2_3_out1_1[51] == 1'b1) && (b_2_3_out1_1[50:49] != 2'b11) ? 20'sb10000000000000000000 :
              b_2_3_out1_1[49:30] + $signed({1'b0, b_2_3_out1_1[29]})));

  assign stateControl_11 = 1'b1;
/*
  always @(posedge clk)
    begin : delayMatch7_process
      if (enable) begin
        delayMatch7_reg[0] <= delayMatch7_reg_next[0];
        delayMatch7_reg[1] <= delayMatch7_reg_next[1];
        delayMatch7_reg[2] <= delayMatch7_reg_next[2];
        delayMatch7_reg[3] <= delayMatch7_reg_next[3];
        delayMatch7_reg[4] <= delayMatch7_reg_next[4];
        delayMatch7_reg[5] <= delayMatch7_reg_next[5];
        delayMatch7_reg[6] <= delayMatch7_reg_next[6];
        delayMatch7_reg[7] <= delayMatch7_reg_next[7];
        delayMatch7_reg[8] <= delayMatch7_reg_next[8];
        delayMatch7_reg[9] <= delayMatch7_reg_next[9];
        delayMatch7_reg[10] <= delayMatch7_reg_next[10];
        delayMatch7_reg[11] <= delayMatch7_reg_next[11];
      end
    end*/

  assign stateControl_12 = delayMatch7_reg[11];
  assign delayMatch7_reg_next[0] = stateControl_11;
  assign delayMatch7_reg_next[1] = delayMatch7_reg[0];
  assign delayMatch7_reg_next[2] = delayMatch7_reg[1];
  assign delayMatch7_reg_next[3] = delayMatch7_reg[2];
  assign delayMatch7_reg_next[4] = delayMatch7_reg[3];
  assign delayMatch7_reg_next[5] = delayMatch7_reg[4];
  assign delayMatch7_reg_next[6] = delayMatch7_reg[5];
  assign delayMatch7_reg_next[7] = delayMatch7_reg[6];
  assign delayMatch7_reg_next[8] = delayMatch7_reg[7];
  assign delayMatch7_reg_next[9] = delayMatch7_reg[8];
  assign delayMatch7_reg_next[10] = delayMatch7_reg[9];
  assign delayMatch7_reg_next[11] = delayMatch7_reg[10];


  // <S3>/a(2)(3)
  assign a_2_3_mul_temp = 32'sb10001111001000110110010110100010 * HeadSum3_out1;
  assign a_2_3_out1 = (((a_2_3_mul_temp[49] == 1'b0) && (a_2_3_mul_temp[48:47] != 2'b00)) || 
    ((a_2_3_mul_temp[49] == 1'b0) && (a_2_3_mul_temp[47:30] == 18'sb011111111111111111)) ? 
    18'sb011111111111111111 :
              ((a_2_3_mul_temp[49] == 1'b1) && (a_2_3_mul_temp[48:47] != 2'b11) ? 18'sb100000000000000000 :
              a_2_3_mul_temp[47:30] + $signed({1'b0, a_2_3_mul_temp[29]})));


  // <S3>/a(3)(3)
  assign a_3_3_mul_temp = 33'sh0CCA2C173 * HeadSum3_out1;
  assign a_3_3_cast = a_3_3_mul_temp[49:0];
  assign a_3_3_out1 = (((a_3_3_cast[49] == 1'b0) && (a_3_3_cast[48:47] != 2'b00)) || ((a_3_3_cast[49] == 
    1'b0) && (a_3_3_cast[47:30] == 18'sb011111111111111111)) ? 18'sb011111111111111111 :
              ((a_3_3_cast[49] == 1'b1) && (a_3_3_cast[48:47] != 2'b11) ? 18'sb100000000000000000 :
              a_3_3_cast[47:30] + $signed({1'b0, a_3_3_cast[29]})));


  // <S3>/FootSum3
  assign FootSum3_sub_cast = {{4{s_3_out1_3[19]}}, s_3_out1_3};
  assign FootSum3_sub_cast_1 = {a_3_3_out1[17], {a_3_3_out1, 5'b00000}};
  assign FootSum3_sub_temp = FootSum3_sub_cast - FootSum3_sub_cast_1;
  assign FootSum3_out1 = ({FootSum3_sub_temp[23], FootSum3_sub_temp[23:7]}) + $signed({1'b0, 
    FootSum3_sub_temp[6]});

  assign FootSum3_out1_1 = (stateControl_12 == 1'b0 ? FootDelay3_out1 :
              FootSum3_out1);


  // <S3>/FootDelay3
/*  always @(posedge clk)
    begin : FootDelay3_process
      if (enable) begin
        FootDelay3_out1 <= FootSum3_out1_1;
      end
    end*/


  // <S3>/BodyLSum23
  assign BodyLSum23_add_cast = {{6{b_2_3_out1_2[19]}}, b_2_3_out1_2};
  assign BodyLSum23_add_cast_1 = {FootDelay3_out1[17], {FootDelay3_out1, 7'b0000000}};
  assign BodyLSum23_add_temp = BodyLSum23_add_cast + BodyLSum23_add_cast_1;
  assign BodyLSum23_out1 = (((BodyLSum23_add_temp[25] == 1'b0) && (BodyLSum23_add_temp[24] != 1'b0)) || 
    ((BodyLSum23_add_temp[25] == 1'b0) && (BodyLSum23_add_temp[24:7] == 18'sb011111111111111111)) ? 
    18'sb011111111111111111 :
              ((BodyLSum23_add_temp[25] == 1'b1) && (BodyLSum23_add_temp[24] != 1'b1) ? 
                18'sb100000000000000000 :
              BodyLSum23_add_temp[24:7] + $signed({1'b0, BodyLSum23_add_temp[6]})));


  // <S3>/BodyRSum23
  assign BodyRSum23_sub_cast = {BodyLSum23_out1[17], BodyLSum23_out1};
  assign BodyRSum23_sub_cast_1 = {a_2_3_out1[17], a_2_3_out1};
  assign BodyRSum23_sub_temp = BodyRSum23_sub_cast - BodyRSum23_sub_cast_1;
  assign BodyRSum23_out1 = ((BodyRSum23_sub_temp[18] == 1'b0) && (BodyRSum23_sub_temp[17] != 1'b0) ? 
    18'sb011111111111111111 :
              ((BodyRSum23_sub_temp[18] == 1'b1) && (BodyRSum23_sub_temp[17] != 1'b1) ? 
                18'sb100000000000000000 :
              $signed(BodyRSum23_sub_temp[17:0])));

  assign BodyRSum23_out1_1 = (stateControl_10 == 1'b0 ? BodyDelay23_out1 :
              BodyRSum23_out1);


  // <S3>/BodyDelay23
/*  always @(posedge clk)
    begin : BodyDelay23_process
      if (enable) begin
        BodyDelay23_out1 <= BodyRSum23_out1_1;
      end
    end*/



  // <S3>/HeadSum3
  // 
  // <S3>/SectOut3
  // 
  // <S3>/SectIn4
  assign HeadSum3_add_cast = {{6{s_3_out1_3[19]}}, s_3_out1_3};
  assign HeadSum3_add_cast_1 = {BodyDelay23_out1[17], {BodyDelay23_out1, 7'b0000000}};
  assign HeadSum3_add_temp = HeadSum3_add_cast + HeadSum3_add_cast_1;
  assign HeadSum3_out1 = (((HeadSum3_add_temp[25] == 1'b0) && (HeadSum3_add_temp[24] != 1'b0)) || 
    ((HeadSum3_add_temp[25] == 1'b0) && (HeadSum3_add_temp[24:7] == 18'sb011111111111111111)) ? 
    18'sb011111111111111111 :
              ((HeadSum3_add_temp[25] == 1'b1) && (HeadSum3_add_temp[24] != 1'b1) ? 18'sb100000000000000000 :
              HeadSum3_add_temp[24:7] + $signed({1'b0, HeadSum3_add_temp[6]})));
/*
  always @(posedge clk)
    begin : HwModeRegister13_process
      if (enable) begin
        SectIn4_out1 <= HeadSum3_out1;
      end
    end*/



  // <S3>/s(4)
  assign s_4_cast = {1'b0, kconst};
  assign s_4_mul_temp = s_4_cast * SectIn4_out1;
  assign s_4_out1 = s_4_mul_temp[49:0];
/*
  always @(posedge clk)
    begin : PipelineRegister6_process
      if (enable) begin
        s_4_out1_1 <= s_4_out1;
      end
    end*/

  assign s_4_out1_2 = (((s_4_out1_1[49] == 1'b0) && (s_4_out1_1[48] != 1'b0)) || ((s_4_out1_1[49] == 1'b0) && 
    (s_4_out1_1[48:29] == 20'sb01111111111111111111)) ? 20'sb01111111111111111111 :
              ((s_4_out1_1[49] == 1'b1) && (s_4_out1_1[48] != 1'b1) ? 20'sb10000000000000000000 :
              s_4_out1_1[48:29] + $signed({1'b0, s_4_out1_1[28]})));

  assign stateControl_13 = 1'b1;

/*  always @(posedge clk)
    begin : delayMatch9_process
      if (enable) begin
        delayMatch9_reg[0] <= delayMatch9_reg_next[0];
        delayMatch9_reg[1] <= delayMatch9_reg_next[1];
        delayMatch9_reg[2] <= delayMatch9_reg_next[2];
        delayMatch9_reg[3] <= delayMatch9_reg_next[3];
        delayMatch9_reg[4] <= delayMatch9_reg_next[4];
        delayMatch9_reg[5] <= delayMatch9_reg_next[5];
        delayMatch9_reg[6] <= delayMatch9_reg_next[6];
        delayMatch9_reg[7] <= delayMatch9_reg_next[7];
        delayMatch9_reg[8] <= delayMatch9_reg_next[8];
        delayMatch9_reg[9] <= delayMatch9_reg_next[9];
        delayMatch9_reg[10] <= delayMatch9_reg_next[10];
        delayMatch9_reg[11] <= delayMatch9_reg_next[11];
        delayMatch9_reg[12] <= delayMatch9_reg_next[12];
        delayMatch9_reg[13] <= delayMatch9_reg_next[13];
      end
    end*/

  assign stateControl_14 = delayMatch9_reg[13];
  assign delayMatch9_reg_next[0] = stateControl_13;
  assign delayMatch9_reg_next[1] = delayMatch9_reg[0];
  assign delayMatch9_reg_next[2] = delayMatch9_reg[1];
  assign delayMatch9_reg_next[3] = delayMatch9_reg[2];
  assign delayMatch9_reg_next[4] = delayMatch9_reg[3];
  assign delayMatch9_reg_next[5] = delayMatch9_reg[4];
  assign delayMatch9_reg_next[6] = delayMatch9_reg[5];
  assign delayMatch9_reg_next[7] = delayMatch9_reg[6];
  assign delayMatch9_reg_next[8] = delayMatch9_reg[7];
  assign delayMatch9_reg_next[9] = delayMatch9_reg[8];
  assign delayMatch9_reg_next[10] = delayMatch9_reg[9];
  assign delayMatch9_reg_next[11] = delayMatch9_reg[10];
  assign delayMatch9_reg_next[12] = delayMatch9_reg[11];
  assign delayMatch9_reg_next[13] = delayMatch9_reg[12];



  // <S3>/a(2)(4)
  assign a_2_4_mul_temp = 32'sb10010000001111100011001000110111 * HeadSum4_out1;
  assign a_2_4_out1 = (((a_2_4_mul_temp[49] == 1'b0) && (a_2_4_mul_temp[48] != 1'b0)) || ((a_2_4_mul_temp[49] 
    == 1'b0) && (a_2_4_mul_temp[48:31] == 18'sb011111111111111111)) ? 18'sb011111111111111111 :
              ((a_2_4_mul_temp[49] == 1'b1) && (a_2_4_mul_temp[48] != 1'b1) ? 18'sb100000000000000000 :
              a_2_4_mul_temp[48:31] + $signed({1'b0, a_2_4_mul_temp[30]})));
 /*//TEST
  reg [17:0] REG;
  always@(posedge clk)begin
	if(reset_x==1)begin
	  REG=18'sd0;
	end
	else
	  REG<=a_2_4_out1;
  end
*/  	

  // <S3>/BodyRSum24
  assign BodyRSum24_sub_cast = {{4{s_4_out1_2[19]}}, s_4_out1_2};
  assign BodyRSum24_sub_cast_1 = {a_2_4_out1[17], {a_2_4_out1, 5'b00000}};//{REG[17], {REG, 5'b00000}};
  assign BodyRSum24_sub_temp = BodyRSum24_sub_cast - BodyRSum24_sub_cast_1;
  assign BodyRSum24_out1 = (((BodyRSum24_sub_temp[23] == 1'b0) && (BodyRSum24_sub_temp[22] != 1'b0)) || 
    ((BodyRSum24_sub_temp[23] == 1'b0) && (BodyRSum24_sub_temp[22:5] == 18'sb011111111111111111)) ? 
    18'sb011111111111111111 :
              ((BodyRSum24_sub_temp[23] == 1'b1) && (BodyRSum24_sub_temp[22] != 1'b1) ? 
                18'sb100000000000000000 :
              BodyRSum24_sub_temp[22:5] + $signed({1'b0, BodyRSum24_sub_temp[4]})));

  assign BodyRSum24_out1_1 = (stateControl_14 == 1'b0 ? BodyDelay24_out1 :
              BodyRSum24_out1);


  // <S3>/BodyDelay24
/*  always @(posedge clk)
    begin : BodyDelay24_process
      if (enable) begin
        BodyDelay24_out1 <= BodyRSum24_out1_1;
      end
    end*/


  // <S3>/HeadSum4
  assign HeadSum4_add_cast = {{4{s_4_out1_2[19]}}, s_4_out1_2};
  assign HeadSum4_add_cast_1 = {BodyDelay24_out1[17], {BodyDelay24_out1, 5'b00000}};
  assign HeadSum4_add_temp = HeadSum4_add_cast + HeadSum4_add_cast_1;
  assign HeadSum4_out1 = (((HeadSum4_add_temp[23] == 1'b0) && (HeadSum4_add_temp[22] != 1'b0)) || 
    ((HeadSum4_add_temp[23] == 1'b0) && (HeadSum4_add_temp[22:5] == 18'sb011111111111111111)) ? 
    18'sb011111111111111111 :
              ((HeadSum4_add_temp[23] == 1'b1) && (HeadSum4_add_temp[22] != 1'b1) ? 18'sb100000000000000000 :
              HeadSum4_add_temp[22:5] + $signed({1'b0, HeadSum4_add_temp[4]})));



  assign Out1 = HeadSum4_out1;

endmodule  // Filter

